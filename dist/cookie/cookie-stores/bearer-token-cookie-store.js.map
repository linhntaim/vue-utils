{"version":3,"sources":["../../../src/cookie/cookie-stores/bearer-token-cookie-store.js"],"names":["BearerTokenCookieStore","value","refreshToken","cookieHandler","get","refreshTokenNaming","name","accessToken","tokenType","tokenEndTime","expires","refreshTokenExpires","transformed","storeTransform","set","Date","CookieStore"],"mappings":"4GAAA,2C,8kFAEaA,CAAAA,sB,sVACSC,K,CAAO,CACrB,GAAIA,KAAJ,CAAW,CACP,GAAMC,CAAAA,YAAY,CAAG,KAAKC,aAAL,CAAmBC,GAAnB,CAAuB,KAAKC,kBAAL,CAAwB,KAAKC,IAA7B,CAAvB,CAArB,CACA,MAAOJ,CAAAA,YAAY,CAAG,CAClBK,WAAW,CAAEN,KADK,CAElBO,SAAS,CAAEP,KAAK,CAACO,SAFC,CAGlBN,YAAY,CAAEA,YAHI,CAAH,CAIf,CACAK,WAAW,CAAEN,KADb,CAEAO,SAAS,CAAEP,KAAK,CAACO,SAFjB,CAIP,CACD,MAAO,KACV,C,sDAEcP,K,CAAO,CAClB,MAAOA,CAAAA,KAAK,CAAG,CACXM,WAAW,CAAEN,KAAK,CAACM,WADR,CAEXC,SAAS,CAAEP,KAAK,CAACO,SAFN,CAGXN,YAAY,CAAED,KAAK,CAACC,YAHT,CAIXO,YAAY,CAAER,KAAK,CAACQ,YAJT,CAAH,CAKR,IACP,C,8DAEkBH,I,CAAM,CACrB,MAAOA,CAAAA,IAAI,CAAG,UACjB,C,sEAEsBI,O,CAAS,CAC5B,KAAKC,mBAAL,CAA2BD,OAC9B,C,oCAEKT,K,CAAO,CACT,GAAMW,CAAAA,WAAW,CAAG,KAAKC,cAAL,CAAoBZ,KAApB,CAApB,CACA,GAAIW,WAAJ,CAAiB,CACb,KAAKX,KAAL,CAAa,CACTM,WAAW,CAAEK,WAAW,CAACL,WADhB,CAETC,SAAS,CAAEI,WAAW,CAACJ,SAFd,CAAb,CAIA,KAAKL,aAAL,CAAmBW,GAAnB,CAAuB,KAAKR,IAA5B,CAAkC,KAAKL,KAAvC,CAA8C,GAAIc,CAAAA,IAAJ,CAASd,KAAK,CAACQ,YAAf,CAA9C,EACA,GAAI,KAAKE,mBAAT,CAA8B,CAC1B,KAAKV,KAAL,CAAWC,YAAX,CAA0BU,WAAW,CAACV,YAAtC,CACA,KAAKC,aAAL,CAAmBW,GAAnB,CAAuB,KAAKT,kBAAL,CAAwB,KAAKC,IAA7B,CAAvB,CAA2D,KAAKL,KAAL,CAAWC,YAAtE,CAAoF,KAAKS,mBAAzF,CACH,CACJ,CAVD,IAUO,CACH,KAAKV,KAAL,CAAa,IAChB,CACD,MAAO,MAAKA,KACf,C,mCAjDuCe,wB","sourcesContent":["import {CookieStore} from './cookie-store'\r\n\r\nexport class BearerTokenCookieStore extends CookieStore {\r\n    retrieveTransform(value) {\r\n        if (value) {\r\n            const refreshToken = this.cookieHandler.get(this.refreshTokenNaming(this.name))\r\n            return refreshToken ? {\r\n                accessToken: value,\r\n                tokenType: value.tokenType,\r\n                refreshToken: refreshToken,\r\n            } : {\r\n                accessToken: value,\r\n                tokenType: value.tokenType,\r\n            }\r\n        }\r\n        return null\r\n    }\r\n\r\n    storeTransform(value) {\r\n        return value ? {\r\n            accessToken: value.accessToken,\r\n            tokenType: value.tokenType,\r\n            refreshToken: value.refreshToken,\r\n            tokenEndTime: value.tokenEndTime,\r\n        } : null\r\n    }\r\n\r\n    refreshTokenNaming(name) {\r\n        return name + ':refresh'\r\n    }\r\n\r\n    setRefreshTokenExpires(expires) {\r\n        this.refreshTokenExpires = expires\r\n    }\r\n\r\n    store(value) {\r\n        const transformed = this.storeTransform(value)\r\n        if (transformed) {\r\n            this.value = {\r\n                accessToken: transformed.accessToken,\r\n                tokenType: transformed.tokenType,\r\n            }\r\n            this.cookieHandler.set(this.name, this.value, new Date(value.tokenEndTime))\r\n            if (this.refreshTokenExpires) {\r\n                this.value.refreshToken = transformed.refreshToken\r\n                this.cookieHandler.set(this.refreshTokenNaming(this.name), this.value.refreshToken, this.refreshTokenExpires)\r\n            }\r\n        } else {\r\n            this.value = null\r\n        }\r\n        return this.value\r\n    }\r\n}\r\n"],"file":"bearer-token-cookie-store.js"}