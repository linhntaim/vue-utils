{"version":3,"sources":["../../../src/cookie/cookie-stores/bearer-token-cookie-store.js"],"names":["BearerTokenCookieStore","value","refreshToken","cookieHandler","get","refreshTokenNaming","name","accessToken","tokenType","expiresIn","expires","refreshTokenExpires","transformed","storeTransform","Date","getTime","set","remove","CookieStore"],"mappings":"4GAAA,2C,gnGAEaA,CAAAA,sB,sVACSC,K,CAAO,CACrB,GAAMC,CAAAA,YAAY,CAAG,KAAKC,aAAL,CAAmBC,GAAnB,CAAuB,KAAKC,kBAAL,CAAwB,KAAKC,IAA7B,CAAvB,CAArB,CACA,GAAIL,KAAJ,CAAW,CACP,MAAOC,CAAAA,YAAY,CAAG,CAClBK,WAAW,CAAEN,KAAK,CAACM,WADD,CAElBC,SAAS,CAAEP,KAAK,CAACO,SAFC,CAGlBC,SAAS,CAAER,KAAK,CAACQ,SAHC,CAIlBP,YAAY,CAAEA,YAJI,CAAH,CAKf,CACAK,WAAW,CAAEN,KAAK,CAACM,WADnB,CAEAC,SAAS,CAAEP,KAAK,CAACO,SAFjB,CAGAC,SAAS,CAAER,KAAK,CAACQ,SAHjB,CAKP,CACD,MAAOP,CAAAA,YAAY,CAAG,CAClBA,YAAY,CAAEA,YADI,CAAH,CAEf,IACP,C,sDAEcD,K,CAAO,CAClB,MAAOA,CAAAA,KAAK,CAAG,CACXM,WAAW,CAAEN,KAAK,CAACM,WADR,CAEXC,SAAS,CAAEP,KAAK,CAACO,SAFN,CAGXN,YAAY,CAAED,KAAK,CAACC,YAHT,CAIXO,SAAS,CAAER,KAAK,CAACQ,SAJN,CAAH,CAKR,IACP,C,8DAEkBH,I,CAAM,CACrB,MAAOA,CAAAA,IAAI,CAAG,YACjB,C,sEAEsBI,O,CAAS,CAC5B,KAAKC,mBAAL,CAA2BD,OAA3B,CACA,MAAO,KACV,C,oCAEKT,K,CAAO,CACT,GAAMW,CAAAA,WAAW,CAAG,KAAKC,cAAL,CAAoBZ,KAApB,CAApB,CACA,GAAIW,WAAJ,CAAiB,CACb,GAAMF,CAAAA,OAAO,CAAG,GAAII,CAAAA,IAAJ,CAAU,GAAIA,CAAAA,IAAJ,EAAD,CAAWC,OAAX,GAAuBH,WAAW,CAACH,SAAZ,CAAwB,IAAxD,CAAhB,CACA,KAAKR,KAAL,CAAa,CACTM,WAAW,CAAEK,WAAW,CAACL,WADhB,CAETC,SAAS,CAAEI,WAAW,CAACJ,SAFd,CAGTC,SAAS,CAAEG,WAAW,CAACH,SAHd,CAAb,CAKA,KAAKN,aAAL,CAAmBa,GAAnB,CAAuB,KAAKV,IAA5B,CAAkC,KAAKL,KAAvC,CAA8CS,OAA9C,EACA,KAAKT,KAAL,CAAWC,YAAX,CAA0BU,WAAW,CAACV,YAAtC,CACA,KAAKC,aAAL,CAAmBa,GAAnB,CACI,KAAKX,kBAAL,CAAwB,KAAKC,IAA7B,CADJ,CAEI,KAAKL,KAAL,CAAWC,YAFf,CAGI,KAAKS,mBAAL,CAA2B,KAAKA,mBAAhC,CAAsDD,OAH1D,CAKH,CAdD,IAcO,CACH,KAAKT,KAAL,CAAa,IAChB,CACD,MAAO,MAAKA,KACf,C,uCAEQ,CACL,KAAKU,mBAAL,CAA2B,IAA3B,CACA,KAAKR,aAAL,CAAmBc,MAAnB,CAA0B,CAAC,KAAKZ,kBAAL,CAAwB,KAAKC,IAA7B,CAAD,CAA1B,EACA,gFACH,C,mCAhEuCY,wB","sourcesContent":["import {CookieStore} from './cookie-store'\r\n\r\nexport class BearerTokenCookieStore extends CookieStore {\r\n    retrieveTransform(value) {\r\n        const refreshToken = this.cookieHandler.get(this.refreshTokenNaming(this.name))\r\n        if (value) {\r\n            return refreshToken ? {\r\n                accessToken: value.accessToken,\r\n                tokenType: value.tokenType,\r\n                expiresIn: value.expiresIn,\r\n                refreshToken: refreshToken,\r\n            } : {\r\n                accessToken: value.accessToken,\r\n                tokenType: value.tokenType,\r\n                expiresIn: value.expiresIn,\r\n            }\r\n        }\r\n        return refreshToken ? {\r\n            refreshToken: refreshToken,\r\n        } : null\r\n    }\r\n\r\n    storeTransform(value) {\r\n        return value ? {\r\n            accessToken: value.accessToken,\r\n            tokenType: value.tokenType,\r\n            refreshToken: value.refreshToken,\r\n            expiresIn: value.expiresIn,\r\n        } : null\r\n    }\r\n\r\n    refreshTokenNaming(name) {\r\n        return name + '___refresh'\r\n    }\r\n\r\n    setRefreshTokenExpires(expires) {\r\n        this.refreshTokenExpires = expires\r\n        return this\r\n    }\r\n\r\n    store(value) {\r\n        const transformed = this.storeTransform(value)\r\n        if (transformed) {\r\n            const expires = new Date((new Date).getTime() + transformed.expiresIn * 1000)\r\n            this.value = {\r\n                accessToken: transformed.accessToken,\r\n                tokenType: transformed.tokenType,\r\n                expiresIn: transformed.expiresIn,\r\n            }\r\n            this.cookieHandler.set(this.name, this.value, expires)\r\n            this.value.refreshToken = transformed.refreshToken\r\n            this.cookieHandler.set(\r\n                this.refreshTokenNaming(this.name),\r\n                this.value.refreshToken,\r\n                this.refreshTokenExpires ? this.refreshTokenExpires : expires,\r\n            )\r\n        } else {\r\n            this.value = null\r\n        }\r\n        return this.value\r\n    }\r\n\r\n    remove() {\r\n        this.refreshTokenExpires = null\r\n        this.cookieHandler.remove([this.refreshTokenNaming(this.name)])\r\n        super.remove()\r\n    }\r\n}\r\n"],"file":"bearer-token-cookie-store.js"}