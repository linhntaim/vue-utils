{"version":3,"sources":["../../src/settings/number-formatter.js"],"names":["DEFAULT_NUMBER_OF_DECIMAL_POINTS","NumberFormatter","settings","numberOfDecimalPoints","type","numberFormat","mode","number","parseFloat","formatPointComma","formatPointSpace","formatCommaPoint","formatCommaSpace","formatted","modeInt","format","modeNormal","toFixed","replace","SettingsHelper"],"mappings":"6aAAA,yE,41EAEA,GAAMA,CAAAA,gCAAgC,CAAG,CAAzC,C,GAEaC,CAAAA,e,4HACT,yBAAYC,QAAZ,CAAsB,iDAClB,uBAAMA,QAAN,EAEA,MAAKC,qBAAL,CAA6BH,gCAA7B,CAHkB,YAIrB,C,iDAED,eAAME,QAAN,CAAgB,CACZ,KAAKE,IAAL,CAAYF,QAAQ,CAACG,YAArB,CACA,MAAO,KACV,C,uBAED,kBAAU,CACN,KAAKC,IAAL,CAAU,CAAV,EACA,MAAO,KACV,C,0BAED,qBAAa,CACT,KAAKA,IAAL,CAAUN,gCAAV,EACA,MAAO,KACV,C,oBAED,eAA+D,IAA1DG,CAAAA,qBAA0D,2DAAlCH,gCAAkC,CAC3D,KAAKG,qBAAL,CAA6BA,qBAA7B,CACA,MAAO,KACV,C,sBAED,gBAAOI,MAAP,CAAe,CACXA,MAAM,CAAGC,UAAU,CAACD,MAAD,CAAnB,CACA,OAAQ,KAAKH,IAAb,EACI,IAAK,aAAL,CACI,MAAO,MAAKK,gBAAL,CAAsBF,MAAtB,CAAP,CACJ,IAAK,aAAL,CACI,MAAO,MAAKG,gBAAL,CAAsBH,MAAtB,CAAP,CACJ,IAAK,aAAL,CACI,MAAO,MAAKI,gBAAL,CAAsBJ,MAAtB,CAAP,CACJ,IAAK,aAAL,CACI,MAAO,MAAKK,gBAAL,CAAsBL,MAAtB,CAAP,CACJ,QACI,MAAOA,CAAAA,MAAP,CAVR,CAYH,C,yBAED,mBAAUA,MAAV,CAAkB,CACd,GAAMM,CAAAA,SAAS,CAAG,KAAKC,OAAL,GAAeC,MAAf,CAAsBR,MAAtB,CAAlB,CACA,KAAKS,UAAL,GACA,MAAOH,CAAAA,SACV,C,4BAED,sBAAaN,MAAb,CAA+E,IAA1DJ,CAAAA,qBAA0D,2DAAlCH,gCAAkC,CAC3E,GAAMa,CAAAA,SAAS,CAAG,KAAKP,IAAL,CAAUH,qBAAV,EAAiCY,MAAjC,CAAwCR,MAAxC,CAAlB,CACA,KAAKS,UAAL,GACA,MAAOH,CAAAA,SACV,C,gCAED,0BAAiBN,MAAjB,CAAyB,CACrB,GAAI,KAAKJ,qBAAL,GAA+B,CAAnC,CAAsC,CAClC,MAAOI,CAAAA,MAAM,CAACU,OAAP,CAAe,KAAKd,qBAApB,EAA2Ce,OAA3C,CAAmD,oBAAnD,CAAyE,KAAzE,CACV,CACD,MAAOX,CAAAA,MAAM,CAACU,OAAP,CAAe,KAAKd,qBAApB,EAA2Ce,OAA3C,CAAmD,qBAAnD,CAA0E,KAA1E,CACV,C,gCAED,0BAAiBX,MAAjB,CAAyB,CACrB,GAAI,KAAKJ,qBAAL,GAA+B,CAAnC,CAAsC,CAClC,MAAOI,CAAAA,MAAM,CAACU,OAAP,CAAe,KAAKd,qBAApB,EAA2Ce,OAA3C,CAAmD,oBAAnD,CAAyE,KAAzE,CACV,CACD,MAAOX,CAAAA,MAAM,CAACU,OAAP,CAAe,KAAKd,qBAApB,EAA2Ce,OAA3C,CAAmD,qBAAnD,CAA0E,KAA1E,CACV,C,gCAED,0BAAiBX,MAAjB,CAAyB,CACrB,MAAO,MAAKG,gBAAL,CAAsBH,MAAtB,EAA8BW,OAA9B,CAAsC,GAAtC,CAA2C,GAA3C,EAAgDA,OAAhD,CAAwD,KAAxD,CAA+D,GAA/D,CACV,C,gCAED,0BAAiBX,MAAjB,CAAyB,CACrB,MAAO,MAAKG,gBAAL,CAAsBH,MAAtB,EAA8BW,OAA9B,CAAsC,GAAtC,CAA2C,GAA3C,CACV,C,4BA3EgCC,0B","sourcesContent":["import SettingsHelper from './settings-helper'\r\n\r\nconst DEFAULT_NUMBER_OF_DECIMAL_POINTS = 2\r\n\r\nexport class NumberFormatter extends SettingsHelper {\r\n    constructor(settings) {\r\n        super(settings)\r\n\r\n        this.numberOfDecimalPoints = DEFAULT_NUMBER_OF_DECIMAL_POINTS\r\n    }\r\n\r\n    apply(settings) {\r\n        this.type = settings.numberFormat\r\n        return this\r\n    }\r\n\r\n    modeInt() {\r\n        this.mode(0)\r\n        return this\r\n    }\r\n\r\n    modeNormal() {\r\n        this.mode(DEFAULT_NUMBER_OF_DECIMAL_POINTS)\r\n        return this\r\n    }\r\n\r\n    mode(numberOfDecimalPoints = DEFAULT_NUMBER_OF_DECIMAL_POINTS) {\r\n        this.numberOfDecimalPoints = numberOfDecimalPoints\r\n        return this\r\n    }\r\n\r\n    format(number) {\r\n        number = parseFloat(number)\r\n        switch (this.type) {\r\n            case 'point_comma':\r\n                return this.formatPointComma(number)\r\n            case 'point_space':\r\n                return this.formatPointSpace(number)\r\n            case 'comma_point':\r\n                return this.formatCommaPoint(number)\r\n            case 'comma_space':\r\n                return this.formatCommaSpace(number)\r\n            default:\r\n                return number\r\n        }\r\n    }\r\n\r\n    formatInt(number) {\r\n        const formatted = this.modeInt().format(number)\r\n        this.modeNormal()\r\n        return formatted\r\n    }\r\n\r\n    formatNumber(number, numberOfDecimalPoints = DEFAULT_NUMBER_OF_DECIMAL_POINTS) {\r\n        const formatted = this.mode(numberOfDecimalPoints).format(number)\r\n        this.modeNormal()\r\n        return formatted\r\n    }\r\n\r\n    formatPointComma(number) {\r\n        if (this.numberOfDecimalPoints === 0) {\r\n            return number.toFixed(this.numberOfDecimalPoints).replace(/(\\d)(?=(\\d{3})+$)/g, '$1,')\r\n        }\r\n        return number.toFixed(this.numberOfDecimalPoints).replace(/(\\d)(?=(\\d{3})+\\.)/g, '$1,')\r\n    }\r\n\r\n    formatPointSpace(number) {\r\n        if (this.numberOfDecimalPoints === 0) {\r\n            return number.toFixed(this.numberOfDecimalPoints).replace(/(\\d)(?=(\\d{3})+$)/g, '$1 ')\r\n        }\r\n        return number.toFixed(this.numberOfDecimalPoints).replace(/(\\d)(?=(\\d{3})+\\.)/g, '$1 ')\r\n    }\r\n\r\n    formatCommaPoint(number) {\r\n        return this.formatPointSpace(number).replace('.', ',').replace(/\\s/g, '.')\r\n    }\r\n\r\n    formatCommaSpace(number) {\r\n        return this.formatPointSpace(number).replace('.', ',')\r\n    }\r\n}\r\n"],"file":"number-formatter.js"}