{"version":3,"sources":["../../src/localization/number-format-helper.js"],"names":["LocalizationHelper","DEFAULT_NUMBER_OF_DECIMAL_POINTS","NumberFormatHelper","constructor","localization","numberOfDecimalPoints","localize","type","number_format","modeInt","mode","modeNormal","format","number","parseFloat","formatPointComma","formatPointSpace","formatCommaPoint","formatCommaSpace","formatInt","formatted","formatNumber","toFixed","replace"],"mappings":"AAAA,MAAOA,CAAAA,kBAAP,KAA+B,uBAA/B,CAEA,KAAMC,CAAAA,gCAAgC,CAAG,CAAzC,CAEA,cAAe,MAAMC,CAAAA,kBAAN,QAAiCF,CAAAA,kBAAmB,CAC/DG,WAAW,CAACC,YAAD,CAAe,CACtB,MAAMA,YAAN,EAEA,KAAKC,qBAAL,CAA6BJ,gCAChC,CAEDK,QAAQ,CAACF,YAAD,CAAe,CACnB,KAAKG,IAAL,CAAYH,YAAY,CAACI,aAC5B,CAEDC,OAAO,EAAG,CACN,KAAKC,IAAL,CAAU,CAAV,EACA,MAAO,KACV,CAEDC,UAAU,EAAG,CACT,KAAKD,IAAL,CAAUT,gCAAV,EACA,MAAO,KACV,CAEDS,IAAI,CAACL,qBAAqB,CAAGJ,gCAAzB,CAA2D,CAC3D,KAAKI,qBAAL,CAA6BA,qBAA7B,CACA,MAAO,KACV,CAEDO,MAAM,CAACC,MAAD,CAAS,CACXA,MAAM,CAAGC,UAAU,CAACD,MAAD,CAAnB,CACA,OAAQ,KAAKN,IAAb,EACI,IAAK,aAAL,CACI,MAAO,MAAKQ,gBAAL,CAAsBF,MAAtB,CAAP,CACJ,IAAK,aAAL,CACI,MAAO,MAAKG,gBAAL,CAAsBH,MAAtB,CAAP,CACJ,IAAK,aAAL,CACI,MAAO,MAAKI,gBAAL,CAAsBJ,MAAtB,CAAP,CACJ,IAAK,aAAL,CACI,MAAO,MAAKK,gBAAL,CAAsBL,MAAtB,CAAP,CACJ,QACI,MAAOA,CAAAA,MAAP,CAVR,CAYH,CAEDM,SAAS,CAACN,MAAD,CAAS,CACd,KAAMO,CAAAA,SAAS,CAAG,KAAKX,OAAL,GAAeG,MAAf,CAAsBC,MAAtB,CAAlB,CACA,KAAKF,UAAL,GACA,MAAOS,CAAAA,SACV,CAEDC,YAAY,CAACR,MAAD,CAASR,qBAAqB,CAAGJ,gCAAjC,CAAmE,CAC3E,KAAMmB,CAAAA,SAAS,CAAG,KAAKV,IAAL,CAAUL,qBAAV,EAAiCO,MAAjC,CAAwCC,MAAxC,CAAlB,CACA,KAAKF,UAAL,GACA,MAAOS,CAAAA,SACV,CAEDL,gBAAgB,CAACF,MAAD,CAAS,CACrB,GAAI,KAAKR,qBAAL,GAA+B,CAAnC,CAAsC,CAClC,MAAOQ,CAAAA,MAAM,CAACS,OAAP,CAAe,KAAKjB,qBAApB,EAA2CkB,OAA3C,CAAmD,oBAAnD,CAAyE,KAAzE,CACV,CACD,MAAOV,CAAAA,MAAM,CAACS,OAAP,CAAe,KAAKjB,qBAApB,EAA2CkB,OAA3C,CAAmD,qBAAnD,CAA0E,KAA1E,CACV,CAEDP,gBAAgB,CAACH,MAAD,CAAS,CACrB,GAAI,KAAKR,qBAAL,GAA+B,CAAnC,CAAsC,CAClC,MAAOQ,CAAAA,MAAM,CAACS,OAAP,CAAe,KAAKjB,qBAApB,EAA2CkB,OAA3C,CAAmD,oBAAnD,CAAyE,KAAzE,CACV,CACD,MAAOV,CAAAA,MAAM,CAACS,OAAP,CAAe,KAAKjB,qBAApB,EAA2CkB,OAA3C,CAAmD,qBAAnD,CAA0E,KAA1E,CACV,CAEDN,gBAAgB,CAACJ,MAAD,CAAS,CACrB,MAAO,MAAKG,gBAAL,CAAsBH,MAAtB,EAA8BU,OAA9B,CAAsC,GAAtC,CAA2C,GAA3C,EAAgDA,OAAhD,CAAwD,KAAxD,CAA+D,GAA/D,CACV,CAEDL,gBAAgB,CAACL,MAAD,CAAS,CACrB,MAAO,MAAKG,gBAAL,CAAsBH,MAAtB,EAA8BU,OAA9B,CAAsC,GAAtC,CAA2C,GAA3C,CACV,CA1E8D","sourcesContent":["import LocalizationHelper from './localization-helper'\r\n\r\nconst DEFAULT_NUMBER_OF_DECIMAL_POINTS = 2\r\n\r\nexport default class NumberFormatHelper extends LocalizationHelper {\r\n    constructor(localization) {\r\n        super(localization)\r\n\r\n        this.numberOfDecimalPoints = DEFAULT_NUMBER_OF_DECIMAL_POINTS\r\n    }\r\n\r\n    localize(localization) {\r\n        this.type = localization.number_format\r\n    }\r\n\r\n    modeInt() {\r\n        this.mode(0)\r\n        return this\r\n    }\r\n\r\n    modeNormal() {\r\n        this.mode(DEFAULT_NUMBER_OF_DECIMAL_POINTS)\r\n        return this\r\n    }\r\n\r\n    mode(numberOfDecimalPoints = DEFAULT_NUMBER_OF_DECIMAL_POINTS) {\r\n        this.numberOfDecimalPoints = numberOfDecimalPoints\r\n        return this\r\n    }\r\n\r\n    format(number) {\r\n        number = parseFloat(number)\r\n        switch (this.type) {\r\n            case 'point_comma':\r\n                return this.formatPointComma(number)\r\n            case 'point_space':\r\n                return this.formatPointSpace(number)\r\n            case 'comma_point':\r\n                return this.formatCommaPoint(number)\r\n            case 'comma_space':\r\n                return this.formatCommaSpace(number)\r\n            default:\r\n                return number\r\n        }\r\n    }\r\n\r\n    formatInt(number) {\r\n        const formatted = this.modeInt().format(number)\r\n        this.modeNormal()\r\n        return formatted\r\n    }\r\n\r\n    formatNumber(number, numberOfDecimalPoints = DEFAULT_NUMBER_OF_DECIMAL_POINTS) {\r\n        const formatted = this.mode(numberOfDecimalPoints).format(number)\r\n        this.modeNormal()\r\n        return formatted\r\n    }\r\n\r\n    formatPointComma(number) {\r\n        if (this.numberOfDecimalPoints === 0) {\r\n            return number.toFixed(this.numberOfDecimalPoints).replace(/(\\d)(?=(\\d{3})+$)/g, '$1,')\r\n        }\r\n        return number.toFixed(this.numberOfDecimalPoints).replace(/(\\d)(?=(\\d{3})+\\.)/g, '$1,')\r\n    }\r\n\r\n    formatPointSpace(number) {\r\n        if (this.numberOfDecimalPoints === 0) {\r\n            return number.toFixed(this.numberOfDecimalPoints).replace(/(\\d)(?=(\\d{3})+$)/g, '$1 ')\r\n        }\r\n        return number.toFixed(this.numberOfDecimalPoints).replace(/(\\d)(?=(\\d{3})+\\.)/g, '$1 ')\r\n    }\r\n\r\n    formatCommaPoint(number) {\r\n        return this.formatPointSpace(number).replace('.', ',').replace(/\\s/g, '.')\r\n    }\r\n\r\n    formatCommaSpace(number) {\r\n        return this.formatPointSpace(number).replace('.', ',')\r\n    }\r\n}\r\n"],"file":"number-format-helper.js"}