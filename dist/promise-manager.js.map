{"version":3,"sources":["../src/promise-manager.js"],"names":["PromiseManager","promises","name","promise","Object","assign","Promise","resolve","reject","names","keys","promising","length","thenArgs","promised","shift","then","args"],"mappings":"2tBAAaA,CAAAA,c,yBACT,yBAAc,sCACV,KAAKC,QAAL,CAAgB,EACnB,C,2DAEGC,I,CAAMC,O,CAAS,CACf,KAAKF,QAAL,CAAcC,IAAd,EAAsBC,OAAtB,CACA,MAAO,KACV,C,wCAEOF,Q,CAAU,CACdG,MAAM,CAACC,MAAP,CAAc,KAAKJ,QAAnB,CAA6BA,QAA7B,EACA,MAAO,KACV,C,qCAEO,gBACJ,MAAO,IAAIK,CAAAA,OAAJ,CAAY,SAACC,OAAD,CAAUC,MAAV,CAAqB,CACpC,GAAMC,CAAAA,KAAK,CAAGL,MAAM,CAACM,IAAP,CAAY,KAAI,CAACT,QAAjB,CAAd,CACIU,SAAS,CAAGF,KAAK,CAACG,MADtB,CAEIC,QAAQ,CAAG,EAFf,CAGA,GAAIC,CAAAA,QAAQ,CAAG,CAAf,CAAkBZ,IAAlB,CAAwBC,OAAxB,CAEA,GAAIQ,SAAS,GAAKG,QAAlB,CAA4B,CACxBP,OAAO,CAACM,QAAD,CAAP,CACA,MACH,CAED,MAAO,CAACX,IAAI,CAAGO,KAAK,CAACM,KAAN,EAAR,IAA2BZ,OAAO,CAAG,KAAI,CAACF,QAAL,CAAcC,IAAd,CAArC,CAAP,CAAkE,CAC9DC,OAAO,CAACa,IAAR,CAAa,UAAa,+BAATC,IAAS,0CAATA,IAAS,uBACtBJ,QAAQ,CAACX,IAAD,CAAR,CAAiBe,IAAjB,CACA,GAAI,EAAEH,QAAF,GAAeH,SAAnB,CAA8B,CAC1BJ,OAAO,CAACM,QAAD,CACV,CACJ,CALD,WAKS,UAAa,gCAATI,IAAS,+CAATA,IAAS,yBAClBT,MAAM,CAAC,CACH,QAAO,CACHN,IAAI,CAAEA,IADH,CAEHe,IAAI,CAAEA,IAFH,CADJ,CAKHD,IAAI,CAAEH,QALH,CAAD,CAOT,CAbD,CAcH,CACJ,CA3BM,CA4BV,C","sourcesContent":["export class PromiseManager {\r\n    constructor() {\r\n        this.promises = {}\r\n    }\r\n\r\n    add(name, promise) {\r\n        this.promises[name] = promise\r\n        return this\r\n    }\r\n\r\n    addMany(promises) {\r\n        Object.assign(this.promises, promises)\r\n        return this\r\n    }\r\n\r\n    ready() {\r\n        return new Promise((resolve, reject) => {\r\n            const names = Object.keys(this.promises),\r\n                promising = names.length,\r\n                thenArgs = {}\r\n            let promised = 0, name, promise\r\n\r\n            if (promising === promised) {\r\n                resolve(thenArgs)\r\n                return\r\n            }\r\n\r\n            while ((name = names.shift()) && (promise = this.promises[name])) {\r\n                promise.then((...args) => {\r\n                    thenArgs[name] = args\r\n                    if (++promised === promising) {\r\n                        resolve(thenArgs)\r\n                    }\r\n                }).catch((...args) => {\r\n                    reject({\r\n                        catch: {\r\n                            name: name,\r\n                            args: args,\r\n                        },\r\n                        then: thenArgs,\r\n                    })\r\n                })\r\n            }\r\n        })\r\n    }\r\n}\r\n"],"file":"promise-manager.js"}