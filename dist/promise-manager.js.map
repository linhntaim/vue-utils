{"version":3,"sources":["../src/promise-manager.js"],"names":["PromiseManager","constructor","promises","add","name","promise","addMany","Object","assign","ready","Promise","resolve","reject","names","keys","promising","length","thenArgs","promised","shift","then","args","catch"],"mappings":"AAAA,cAAe,MAAMA,CAAAA,cAAe,CAChCC,WAAW,EAAG,CACV,KAAKC,QAAL,CAAgB,EACnB,CAEDC,GAAG,CAACC,IAAD,CAAOC,OAAP,CAAgB,CACf,KAAKH,QAAL,CAAcE,IAAd,EAAsBC,OAAtB,CACA,MAAO,KACV,CAEDC,OAAO,CAACJ,QAAD,CAAW,CACdK,MAAM,CAACC,MAAP,CAAc,KAAKN,QAAnB,CAA6BA,QAA7B,EACA,MAAO,KACV,CAEDO,KAAK,EAAG,CACJ,MAAO,IAAIC,CAAAA,OAAJ,CAAY,CAACC,OAAD,CAAUC,MAAV,GAAqB,CACpC,KAAMC,CAAAA,KAAK,CAAGN,MAAM,CAACO,IAAP,CAAY,KAAKZ,QAAjB,CAAd,CACIa,SAAS,CAAGF,KAAK,CAACG,MADtB,CAEIC,QAAQ,CAAG,EAFf,CAGA,GAAIC,CAAAA,QAAQ,CAAG,CAAf,CAAkBd,IAAlB,CAAwBC,OAAxB,CAEA,GAAIU,SAAS,GAAKG,QAAlB,CAA4B,CACxBP,OAAO,CAACM,QAAD,CAAP,CACA,MACH,CAED,MAAO,CAACb,IAAI,CAAGS,KAAK,CAACM,KAAN,EAAR,IAA2Bd,OAAO,CAAG,KAAKH,QAAL,CAAcE,IAAd,CAArC,CAAP,CAAkE,CAC9DC,OAAO,CAACe,IAAR,CAAa,CAAC,GAAGC,IAAJ,GAAa,CACtBJ,QAAQ,CAACb,IAAD,CAAR,CAAiBiB,IAAjB,CACA,GAAI,EAAEH,QAAF,GAAeH,SAAnB,CAA8B,CAC1BJ,OAAO,CAACM,QAAD,CACV,CACJ,CALD,EAKGK,KALH,CAKS,CAAC,GAAGD,IAAJ,GAAa,CAClBT,MAAM,CAAC,CACHU,KAAK,CAAE,CACHlB,IAAI,CAAEA,IADH,CAEHiB,IAAI,CAAEA,IAFH,CADJ,CAKHD,IAAI,CAAEH,QALH,CAAD,CAOT,CAbD,CAcH,CACJ,CA3BM,CA4BV,CA5C+B","sourcesContent":["export default class PromiseManager {\r\n    constructor() {\r\n        this.promises = {}\r\n    }\r\n\r\n    add(name, promise) {\r\n        this.promises[name] = promise\r\n        return this\r\n    }\r\n\r\n    addMany(promises) {\r\n        Object.assign(this.promises, promises)\r\n        return this\r\n    }\r\n\r\n    ready() {\r\n        return new Promise((resolve, reject) => {\r\n            const names = Object.keys(this.promises),\r\n                promising = names.length,\r\n                thenArgs = {}\r\n            let promised = 0, name, promise\r\n\r\n            if (promising === promised) {\r\n                resolve(thenArgs)\r\n                return\r\n            }\r\n\r\n            while ((name = names.shift()) && (promise = this.promises[name])) {\r\n                promise.then((...args) => {\r\n                    thenArgs[name] = args\r\n                    if (++promised === promising) {\r\n                        resolve(thenArgs)\r\n                    }\r\n                }).catch((...args) => {\r\n                    reject({\r\n                        catch: {\r\n                            name: name,\r\n                            args: args,\r\n                        },\r\n                        then: thenArgs,\r\n                    })\r\n                })\r\n            }\r\n        })\r\n    }\r\n}\r\n"],"file":"promise-manager.js"}