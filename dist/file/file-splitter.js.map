{"version":3,"sources":["../../src/file/file-splitter.js"],"names":["FileSplitter","file","chunkSize","chunks","numChunks","Math","ceil","size","i","push","slice","at","length","index","data","total","callback","forEach","chunk","progressHandler","initCallback","chunkCallback","Promise","resolve","reject","remaining","reset","increaseLimit","every","chunkData","chunkIndex","chunkTotal","run","progressResolve","progressReject"],"mappings":"kGAAA,oD,unBAEaA,CAAAA,Y,yBACT;AACJ;AACA;AACA;AACA,OACI,sBAAYC,IAAZ,CAA+C,IAA7BC,CAAAA,SAA6B,2DAAjB,KAAO,IAAP,CAAc,CAAG,oCAC3C,KAAKD,IAAL,CAAYA,IAAZ,CACA,KAAKE,MAAL,CAAc,EAAd,CACA,GAAMC,CAAAA,SAAS,CAAGC,IAAI,CAACC,IAAL,CAAUL,IAAI,CAACM,IAAL,CAAYL,SAAtB,CAAlB,CACA,IAAK,GAAIM,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGJ,SAApB,CAA+B,EAAEI,CAAjC,CAAoC,CAChC,KAAKL,MAAL,CAAYM,IAAZ,CAAiBR,IAAI,CAACS,KAAL,CAAWF,CAAC,CAAGN,SAAf,CAA0B,CAACM,CAAC,CAAG,CAAL,EAAUN,SAApC,CAAjB,CACH,CACD,KAAKS,EAAL,CAAU,CACb,C,4DAEM,CACH,GAAI,KAAKA,EAAL,GAAY,KAAKR,MAAL,CAAYS,MAA5B,CAAoC,MAAO,MAAP,CACpC,GAAMC,CAAAA,KAAK,CAAG,KAAKF,EAAL,EAAd,CACA,MAAO,CACHG,IAAI,CAAE,KAAKX,MAAL,CAAYU,KAAZ,CADH,CAEHA,KAAK,CAAEA,KAFJ,CAGHE,KAAK,CAAE,KAAKH,MAAL,EAHJ,CAKV,C,oCAEKI,Q,CAAU,gBACZ,KAAKb,MAAL,CAAYc,OAAZ,CAAoB,SAACC,KAAD,CAAQL,KAAR,CAAkB,CAClCG,QAAQ,CAACE,KAAD,CAAQL,KAAR,CAAe,KAAI,CAACD,MAAL,EAAf,CACX,CAFD,CAGH,C,uCAEQ,CACL,MAAO,MAAKT,MAAL,CAAYS,MACtB,C,sCAEMO,e,CAAiBC,Y,CAAcC,a,CAAe,iBACjD,MAAO,IAAIC,CAAAA,OAAJ,CAAY,SAACC,OAAD,CAAUC,MAAV,CAAqB,CACpC,GAAIC,CAAAA,SAAS,CAAG,MAAI,CAACb,MAAL,EAAhB,CACAO,eAAe,CAACO,KAAhB,GAAwBC,aAAxB,CAAsCF,SAAtC,EACA,MAAI,CAACG,KAAL,CAAW,SAACC,SAAD,CAAYC,UAAZ,CAAwBC,UAAxB,CAAuC,CAC9CZ,eAAe,CAACa,GAAhB,CAAoB,SAACC,eAAD,CAAkBC,cAAlB,CAAqC,CACrDb,aAAa,CACTQ,SADS,CAETC,UAFS,CAGTC,UAHS,CAIT,UAAM,CACFE,eAAe,GAEf,EAAER,SAAF,CACA,GAAIA,SAAS,GAAK,CAAlB,CAAqB,CACjBF,OAAO,EACV,CACJ,CAXQ,CAYT,UAAM,CACFW,cAAc,GACdV,MAAM,EACT,CAfQ,CAiBhB,CAlBD,CAmBH,CApBD,CAqBH,CAxBM,CAyBV,C","sourcesContent":["import {ProgressHandler} from '../progress-handler'\r\n\r\nexport class FileSplitter {\r\n    /**\r\n     *\r\n     * @param {File} file\r\n     * @param {Number} chunkSize\r\n     */\r\n    constructor(file, chunkSize = 1024 * 1024 * 2) {\r\n        this.file = file\r\n        this.chunks = []\r\n        const numChunks = Math.ceil(file.size / chunkSize)\r\n        for (let i = 0; i < numChunks; ++i) {\r\n            this.chunks.push(file.slice(i * chunkSize, (i + 1) * chunkSize))\r\n        }\r\n        this.at = 0\r\n    }\r\n\r\n    next() {\r\n        if (this.at === this.chunks.length) return false\r\n        const index = this.at++\r\n        return {\r\n            data: this.chunks[index],\r\n            index: index,\r\n            total: this.length(),\r\n        }\r\n    }\r\n\r\n    every(callback) {\r\n        this.chunks.forEach((chunk, index) => {\r\n            callback(chunk, index, this.length())\r\n        })\r\n    }\r\n\r\n    length() {\r\n        return this.chunks.length\r\n    }\r\n\r\n    upload(progressHandler, initCallback, chunkCallback) {\r\n        return new Promise((resolve, reject) => {\r\n            let remaining = this.length()\r\n            progressHandler.reset().increaseLimit(remaining)\r\n            this.every((chunkData, chunkIndex, chunkTotal) => {\r\n                progressHandler.run((progressResolve, progressReject) => {\r\n                    chunkCallback(\r\n                        chunkData,\r\n                        chunkIndex,\r\n                        chunkTotal,\r\n                        () => {\r\n                            progressResolve()\r\n\r\n                            --remaining\r\n                            if (remaining === 0) {\r\n                                resolve()\r\n                            }\r\n                        },\r\n                        () => {\r\n                            progressReject()\r\n                            reject()\r\n                        },\r\n                    )\r\n                })\r\n            })\r\n        })\r\n    }\r\n}"],"file":"file-splitter.js"}