{"version":3,"sources":["../../src/file/file-helper.js"],"names":["FileHelper","numberFormatter","fileSizeUnits","size","callback","unitSeparator","unitIndex","toFixed","autoDisplaySize","parseInt","toString","formatNumber","formatInt","file","allowedExtensions","allowedExtensionsErrorCallback","maxSize","maxSizeErrorCallback","name","includes","split","pop","extensions","delimiter","map","extension","startsWith","join"],"mappings":"utBAAaA,CAAAA,U,yBACT,oBAAYC,eAAZ,CAA6B,kCACzB,KAAKA,eAAL,CAAuBA,eAAvB,CACA,KAAKC,aAAL,CAAqB,CAAC,MAAD,CAAS,OAAT,CAAkB,IAAlB,CAAwB,IAAxB,CAA8B,IAA9B,CAAoC,IAApC,CACxB,C,sDAED,yBAAgBC,IAAhB,CAA4D,IAAtCC,CAAAA,QAAsC,2DAA3B,IAA2B,IAArBC,CAAAA,aAAqB,2DAAL,GAAK,CACxD,GAAIC,CAAAA,SAAS,CAAG,CAAhB,CAEA,GAAIH,IAAI,CAAG,CAAX,CAAc,CACVG,SAAS,CAAG,CAAZ,CACA,MAAOH,IAAI,CAAG,IAAd,CAAoB,CAChBA,IAAI,EAAI,IAAR,CACA,EAAEG,SACL,CACJ,CAED,GAAIF,QAAQ,GAAK,IAAjB,CAAuB,CACnBD,IAAI,CAAGA,IAAI,CAACI,OAAL,EACV,CAFD,IAEO,IAAI,MAAOH,CAAAA,QAAP,GAAoB,QAAxB,CAAkC,CACrCD,IAAI,CAAGA,IAAI,CAACI,OAAL,CAAaH,QAAb,CACV,CAFM,IAEA,IAAI,MAAOA,CAAAA,QAAP,GAAoB,UAAxB,CAAoC,CACvCD,IAAI,CAAGC,QAAQ,CAACD,IAAD,CAClB,CACD,MAAOA,CAAAA,IAAI,CAAGE,aAAP,CAAuB,KAAKH,aAAL,CAAmBI,SAAnB,CACjC,C,wCAED,kCAAyBH,IAAzB,CAAoD,mBAArBE,CAAAA,aAAqB,2DAAL,GAAK,CAChD,MAAO,MAAKG,eAAL,CAAqBL,IAArB,CAA2B,SAACA,IAAD,CAAU,CACxC,MAAOA,CAAAA,IAAI,GAAKM,QAAQ,CAACN,IAAI,CAACO,QAAL,EAAD,CAAjB,CACH,KAAI,CAACT,eAAL,CAAqBU,YAArB,CAAkCR,IAAlC,CADG,CACuC,KAAI,CAACF,eAAL,CAAqBW,SAArB,CAA+BT,IAA/B,CACjD,CAHM,CAGJE,aAHI,CAIV,C,yBAED,mBAAUQ,IAAV,MAKG,gCAJCC,iBAID,CAJCA,iBAID,gCAJqB,IAIrB,mDAHCC,8BAGD,CAHCA,8BAGD,iCAHkC,IAGlC,0CAFCC,OAED,CAFCA,OAED,uBAFW,IAEX,yCADCC,oBACD,CADCA,oBACD,gCADwB,IACxB,uBACC,GAAIH,iBAAJ,CAAuB,CACnB,GAAI,CAACD,IAAI,CAACK,IAAL,CAAUC,QAAV,CAAmB,GAAnB,CAAD,EAA4B,CAACL,iBAAiB,CAACK,QAAlB,CAA2BN,IAAI,CAACK,IAAL,CAAUE,KAAV,CAAgB,GAAhB,EAAqBC,GAArB,EAA3B,CAAjC,CAAyF,CACrFN,8BAA8B,EAAIA,8BAA8B,EAAhE,CACA,MAAO,MACV,CACJ,CACD,GAAIC,OAAJ,CAAa,CACT,GAAIH,IAAI,CAACV,IAAL,CAAYa,OAAhB,CAAyB,CACrBC,oBAAoB,EAAIA,oBAAoB,EAA5C,CACA,MAAO,MACV,CACJ,CACD,MAAO,KACV,CAED;AACJ;AACA;AACA;AACA;AACA,O,kCACI,4BAAmBK,UAAnB,CAAiD,IAAlBC,CAAAA,SAAkB,2DAAN,IAAM,CAC7C,MAAOD,CAAAA,UAAU,CACZE,GADE,CACE,SAAAC,SAAS,QAAIA,CAAAA,SAAS,CAACC,UAAV,CAAqB,GAArB,EAA4BD,SAA5B,CAAwC,IAAMA,SAAlD,CADX,EAEFE,IAFE,CAEGJ,SAFH,CAGV,C","sourcesContent":["export class FileHelper {\r\n    constructor(numberFormatter) {\r\n        this.numberFormatter = numberFormatter\r\n        this.fileSizeUnits = ['byte', 'bytes', 'KB', 'MB', 'GB', 'TB']\r\n    }\r\n\r\n    autoDisplaySize(size, callback = null, unitSeparator = ' ') {\r\n        let unitIndex = 0\r\n\r\n        if (size > 1) {\r\n            unitIndex = 1\r\n            while (size > 1024) {\r\n                size /= 1024\r\n                ++unitIndex\r\n            }\r\n        }\r\n\r\n        if (callback === true) {\r\n            size = size.toFixed()\r\n        } else if (typeof callback === 'number') {\r\n            size = size.toFixed(callback)\r\n        } else if (typeof callback === 'function') {\r\n            size = callback(size)\r\n        }\r\n        return size + unitSeparator + this.fileSizeUnits[unitIndex]\r\n    }\r\n\r\n    autoLocalizedDisplaySize(size, unitSeparator = ' ') {\r\n        return this.autoDisplaySize(size, (size) => {\r\n            return size !== parseInt(size.toString()) ?\r\n                this.numberFormatter.formatNumber(size) : this.numberFormatter.formatInt(size)\r\n        }, unitSeparator)\r\n    }\r\n\r\n    checkFile(file, {\r\n        allowedExtensions = null,\r\n        allowedExtensionsErrorCallback = null,\r\n        maxSize = null,\r\n        maxSizeErrorCallback = null,\r\n    }) {\r\n        if (allowedExtensions) {\r\n            if (!file.name.includes('.') || !allowedExtensions.includes(file.name.split('.').pop())) {\r\n                allowedExtensionsErrorCallback && allowedExtensionsErrorCallback()\r\n                return false\r\n            }\r\n        }\r\n        if (maxSize) {\r\n            if (file.size > maxSize) {\r\n                maxSizeErrorCallback && maxSizeErrorCallback()\r\n                return false\r\n            }\r\n        }\r\n        return true\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {String[]} extensions\r\n     * @param {String} delimiter\r\n     * @returns {String}\r\n     */\r\n    acceptedExtensions(extensions, delimiter = ', ') {\r\n        return extensions\r\n            .map(extension => extension.startsWith('.') ? extension : '.' + extension)\r\n            .join(delimiter)\r\n    }\r\n}\r\n"],"file":"file-helper.js"}