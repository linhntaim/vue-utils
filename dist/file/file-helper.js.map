{"version":3,"sources":["../../src/file/file-helper.js"],"names":["FileHelper","numberFormatter","fileSizeType","fileSize","asSizeWithTypeIndex","typeIndex","parseInt","formatNumber","formatInt","file","allowedExtensions","allowedExtensionsErrorCallback","maxSize","maxSizeErrorCallback","name","includes","split","pop","size"],"mappings":"utBAAaA,CAAAA,U,yBACT,oBAAYC,eAAZ,CAA6B,kCACzB,KAAKA,eAAL,CAAuBA,eAAvB,CACA,KAAKC,YAAL,CAAoB,CAAC,MAAD,CAAS,OAAT,CAAkB,IAAlB,CAAwB,IAAxB,CAA8B,IAA9B,CACvB,C,6CAED,gBAAOC,QAAP,CAAiB,CACb,MAAO,MAAKC,mBAAL,CAAyBD,QAAzB,CACV,C,mCAED,6BAAoBA,QAApB,CAA6C,IAAfE,CAAAA,SAAe,2DAAH,CAAG,CACzC,GAAIF,QAAQ,CAAG,IAAf,CAAqB,CACjB,MAAO,MAAKC,mBAAL,CAAyBD,QAAQ,CAAG,IAApC,CAA0C,EAAEE,SAA5C,CACV,CAED,GAAIA,SAAS,GAAK,CAAd,EAAmBF,QAAQ,EAAI,CAAnC,CAAsC,CAClCE,SAAS,CAAG,CACf,CAED,MAAO,CAACF,QAAQ,CAAGG,QAAQ,CAACH,QAAD,CAAnB,CAAgC,CAAhC,CACJ,KAAKF,eAAL,CAAqBM,YAArB,CAAkCJ,QAAlC,CADI,CAC0C,KAAKF,eAAL,CAAqBO,SAArB,CAA+BL,QAA/B,CAD3C,EAED,GAFC,CAEK,KAAKD,YAAL,CAAkBG,SAAlB,CACf,C,yBAED,mBAAUI,IAAV,MAAgI,gCAA/GC,iBAA+G,CAA/GA,iBAA+G,gCAA3F,IAA2F,mDAArFC,8BAAqF,CAArFA,8BAAqF,iCAApD,IAAoD,0CAA9CC,OAA8C,CAA9CA,OAA8C,uBAApC,IAAoC,yCAA9BC,oBAA8B,CAA9BA,oBAA8B,gCAAP,IAAO,uBAC5H,GAAIH,iBAAJ,CAAuB,CACnB,GAAI,CAACD,IAAI,CAACK,IAAL,CAAUC,QAAV,CAAmB,GAAnB,CAAD,EAA4B,CAACL,iBAAiB,CAACK,QAAlB,CAA2BN,IAAI,CAACK,IAAL,CAAUE,KAAV,CAAgB,GAAhB,EAAqBC,GAArB,EAA3B,CAAjC,CAAyF,CACrFN,8BAA8B,EAAIA,8BAA8B,EAAhE,CACA,MAAO,MACV,CACJ,CACD,GAAIC,OAAJ,CAAa,CACT,GAAIH,IAAI,CAACS,IAAL,CAAYN,OAAhB,CAAyB,CACrBC,oBAAoB,EAAIA,oBAAoB,EAA5C,CACA,MAAO,MACV,CACJ,CACD,MAAO,KACV,C","sourcesContent":["export class FileHelper {\r\n    constructor(numberFormatter) {\r\n        this.numberFormatter = numberFormatter\r\n        this.fileSizeType = ['byte', 'bytes', 'KB', 'MB', 'GB']\r\n    }\r\n\r\n    asSize(fileSize) {\r\n        return this.asSizeWithTypeIndex(fileSize)\r\n    }\r\n\r\n    asSizeWithTypeIndex(fileSize, typeIndex = 1) {\r\n        if (fileSize > 1024) {\r\n            return this.asSizeWithTypeIndex(fileSize / 1024, ++typeIndex)\r\n        }\r\n\r\n        if (typeIndex === 1 && fileSize <= 1) {\r\n            typeIndex = 0\r\n        }\r\n\r\n        return (fileSize - parseInt(fileSize) > 0 ?\r\n            this.numberFormatter.formatNumber(fileSize) : this.numberFormatter.formatInt(fileSize))\r\n            + ' ' + this.fileSizeType[typeIndex]\r\n    }\r\n\r\n    checkFile(file, {allowedExtensions = null, allowedExtensionsErrorCallback = null, maxSize = null, maxSizeErrorCallback = null}) {\r\n        if (allowedExtensions) {\r\n            if (!file.name.includes('.') || !allowedExtensions.includes(file.name.split('.').pop())) {\r\n                allowedExtensionsErrorCallback && allowedExtensionsErrorCallback()\r\n                return false\r\n            }\r\n        }\r\n        if (maxSize) {\r\n            if (file.size > maxSize) {\r\n                maxSizeErrorCallback && maxSizeErrorCallback()\r\n                return false\r\n            }\r\n        }\r\n        return true\r\n    }\r\n}\r\n"],"file":"file-helper.js"}