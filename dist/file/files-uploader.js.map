{"version":3,"sources":["../../src/file/files-uploader.js"],"names":["FilesUploader","ui","maxUploadFileSize","maximumChunkSize","percentageTextTemplate","files","progress","ProgressHandler","filteredCallback","everyChunkCallback","everyDoneCallback","everyErrorCallback","everyPromisedBeforeCallback","preview","processFiles","then","processChunks","processPreview","Promise","resolve","remaining","length","left","increaseLimit","Array","from","forEach","file","run","progressResolve","progressReject","waitRendering","push","original","reset","processFilePreview","doneCallback","errorCallback","reader","FileReader","onerror","onabort","onload","e","target","result","readAsDataURL","chunkSize","data","processFileChunks","chunkCallback","fileSplitter","FileSplitter","reject","every","chunkData","chunkIndex","chunksTotal"],"mappings":"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","sourcesContent":["import {ProgressHandler} from '../progress-handler'\r\nimport {FileSplitter} from './file-splitter'\r\n\r\nexport class FilesUploader {\r\n    constructor(ui, maxUploadFileSize, maximumChunkSize = 1024 * 1024 * 10, percentageTextTemplate = '{percent}%') {\r\n        this.ui = ui\r\n        this.maxUploadFileSize = maxUploadFileSize\r\n        this.maximumChunkSize = maximumChunkSize\r\n        this.percentageTextTemplate = percentageTextTemplate\r\n        this.files = []\r\n        this.progress = new ProgressHandler(this.ui, this.percentageTextTemplate)\r\n    }\r\n\r\n    quickProcessFilesWithChunks({files, filteredCallback = null}, {everyChunkCallback, everyDoneCallback = null, everyErrorCallback = null, everyPromisedBeforeCallback = null}, preview = false) {\r\n        this.processFiles(files, filteredCallback).then(() => {\r\n            const processChunks = () => this.processChunks(everyChunkCallback, everyDoneCallback, everyErrorCallback, everyPromisedBeforeCallback)\r\n            preview ? this.processPreview().then(processChunks) : processChunks()\r\n        })\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {FileList | array } files\r\n     * @param {function | null} filteredCallback\r\n     * @return {Promise}\r\n     */\r\n    processFiles(files, filteredCallback = null) {\r\n        this.files = []\r\n        return new Promise(resolve => {\r\n            let remaining = files.length\r\n            const left = () => {\r\n                --remaining\r\n                if (remaining === 0) {\r\n                    resolve()\r\n                }\r\n            }\r\n\r\n            this.progress.increaseLimit(remaining)\r\n            Array.from(files).forEach(file => {\r\n                this.progress.run((progressResolve, progressReject) => {\r\n                    if (!filteredCallback || filteredCallback(file)) {\r\n                        this.ui.waitRendering(() => {\r\n                            this.files.push({\r\n                                original: file,\r\n                                progress: new ProgressHandler(this.ui, this.percentageTextTemplate),\r\n                                preview: null,\r\n                            })\r\n\r\n                            progressResolve()\r\n                            left()\r\n                        })\r\n                        return\r\n                    }\r\n\r\n                    progressReject()\r\n                    left()\r\n                })\r\n            })\r\n        })\r\n    }\r\n\r\n    length() {\r\n        return this.files.length\r\n    }\r\n\r\n    clear() {\r\n        this.files = []\r\n        this.progress.reset()\r\n    }\r\n\r\n    processPreview() {\r\n        return new Promise(resolve => {\r\n            let remaining = this.files.length\r\n            const left = () => {\r\n                --remaining\r\n                if (remaining === 0) {\r\n                    resolve()\r\n                }\r\n            }\r\n\r\n            this.progress.increaseLimit(remaining)\r\n            this.files.forEach(file => {\r\n                this.progress.run((progressResolve, progressReject) => {\r\n                    this.processFilePreview(file, () => {\r\n                        progressResolve()\r\n                        left()\r\n                    }, () => {\r\n                        progressReject()\r\n                        left()\r\n                    })\r\n                })\r\n            })\r\n        })\r\n    }\r\n\r\n    processFilePreview(file, doneCallback = null, errorCallback = null) {\r\n        const reader = new FileReader()\r\n        reader.onerror = () => {\r\n            errorCallback && errorCallback()\r\n        }\r\n        reader.onabort = () => {\r\n            errorCallback && errorCallback()\r\n        }\r\n        reader.onload = e => {\r\n            this.ui.waitRendering(() => {\r\n                file.preview = e.target.result\r\n\r\n                doneCallback && doneCallback()\r\n            })\r\n        }\r\n        this.ui.waitRendering(() => reader.readAsDataURL(file.original))\r\n\r\n        return this\r\n    }\r\n\r\n    processChunks(everyChunkCallback, everyDoneCallback = null, everyErrorCallback = null, everyPromisedBeforeCallback = null) {\r\n        let chunkSize = this.maxUploadFileSize / 2\r\n        if (chunkSize > this.maximumChunkSize) {\r\n            chunkSize = this.maximumChunkSize\r\n        }\r\n\r\n        return new Promise(resolve => {\r\n            let remaining = this.files.length\r\n            const left = () => {\r\n                --remaining\r\n                if (remaining === 0) {\r\n                    resolve()\r\n                }\r\n            }\r\n\r\n            this.progress.increaseLimit(remaining)\r\n            this.files.forEach(file => {\r\n                const run = (data = null) => {\r\n                    this.progress.run((progressResolve, progressReject) => {\r\n                        this.processFileChunks(file, chunkSize, everyChunkCallback, data).then(() => {\r\n                            progressResolve()\r\n                            everyDoneCallback && everyDoneCallback(file)\r\n                            left()\r\n                        }).catch(() => {\r\n                            progressReject()\r\n                            everyErrorCallback && everyErrorCallback(file)\r\n                            left()\r\n                        })\r\n                    })\r\n                }\r\n\r\n                (everyPromisedBeforeCallback && everyPromisedBeforeCallback(file).then(run).catch(left)) || run()\r\n            })\r\n        })\r\n    }\r\n\r\n    processFileChunks(file, chunkSize, chunkCallback, data = null) {\r\n        const fileSplitter = new FileSplitter(file.original, chunkSize)\r\n\r\n        return new Promise((resolve, reject) => {\r\n            let remaining = fileSplitter.length()\r\n            const left = () => {\r\n                --remaining\r\n                if (remaining === 0) {\r\n                    resolve()\r\n                }\r\n            }\r\n\r\n            file.progress.increaseLimit(remaining)\r\n            fileSplitter.every((chunkData, chunkIndex, chunksTotal) => {\r\n                file.progress.run((progressResolve, progressReject) => {\r\n                    this.ui.waitRendering(() => {\r\n                        chunkCallback(chunkData, chunkIndex, chunksTotal, () => {\r\n                            progressResolve()\r\n                            left()\r\n                        }, () => {\r\n                            progressReject()\r\n                            reject()\r\n                        }, file, data)\r\n                    })\r\n                })\r\n            })\r\n        })\r\n    }\r\n}"],"file":"files-uploader.js"}