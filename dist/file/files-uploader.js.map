{"version":3,"sources":["../../src/file/files-uploader.js"],"names":["FilesUploader","ui","percentageTextTemplate","files","progress","ProgressHandler","filteredCallback","Promise","resolve","remaining","length","left","increaseLimit","Array","from","forEach","file","run","progressResolve","progressReject","waitRendering","push","original","preview","reset","processFilePreview","doneCallback","errorCallback","reader","FileReader","onerror","onabort","onload","e","target","result","readAsDataURL","chunkSize","everyChunkCallback","everyDoneCallback","everyErrorCallback","everyPromisedBeforeCallback","data","processFileChunks","then","chunkCallback","fileSplitter","FileSplitter","reject","every","chunkData","chunkIndex","chunksTotal"],"mappings":"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","sourcesContent":["import {ProgressHandler} from '../progress-handler'\r\nimport {FileSplitter} from './file-splitter'\r\n\r\nexport class FilesUploader {\r\n    constructor(ui, percentageTextTemplate = '{percent}%') {\r\n        this.ui = ui\r\n        this.percentageTextTemplate = percentageTextTemplate\r\n        this.files = []\r\n        this.progress = new ProgressHandler(this.ui, this.percentageTextTemplate)\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {FileList | array } files\r\n     * @param {function | null} filteredCallback\r\n     * @return {Promise}\r\n     */\r\n    processFiles(files, filteredCallback = null) {\r\n        return new Promise(resolve => {\r\n            let remaining = files.length\r\n            const left = () => {\r\n                --remaining\r\n                if (remaining === 0) {\r\n                    resolve()\r\n                }\r\n            }\r\n\r\n            this.progress.increaseLimit(remaining)\r\n            Array.from(files).forEach(file => {\r\n                this.progress.run((progressResolve, progressReject) => {\r\n                    if (!filteredCallback || filteredCallback(file)) {\r\n                        this.ui.waitRendering(() => {\r\n                            this.files.push({\r\n                                original: file,\r\n                                progress: new ProgressHandler(this.ui, this.percentageTextTemplate),\r\n                                preview: null,\r\n                            })\r\n\r\n                            progressResolve()\r\n                            left()\r\n                        })\r\n                        return\r\n                    }\r\n\r\n                    progressReject()\r\n                    left()\r\n                })\r\n            })\r\n        })\r\n    }\r\n\r\n    length() {\r\n        return this.files.length\r\n    }\r\n\r\n    clear() {\r\n        this.files = []\r\n        this.progress.reset()\r\n    }\r\n\r\n    processPreview() {\r\n        return new Promise(resolve => {\r\n            let remaining = this.files.length\r\n            const left = () => {\r\n                --remaining\r\n                if (remaining === 0) {\r\n                    resolve()\r\n                }\r\n            }\r\n\r\n            this.progress.increaseLimit(remaining)\r\n            this.files.forEach(file => {\r\n                this.progress.run((progressResolve, progressReject) => {\r\n                    this.processFilePreview(file, () => {\r\n                        progressResolve()\r\n                        left()\r\n                    }, () => {\r\n                        progressReject()\r\n                        left()\r\n                    })\r\n                })\r\n            })\r\n        })\r\n    }\r\n\r\n    processFilePreview(file, doneCallback = null, errorCallback = null) {\r\n        const reader = new FileReader()\r\n        reader.onerror = () => {\r\n            errorCallback && errorCallback()\r\n        }\r\n        reader.onabort = () => {\r\n            errorCallback && errorCallback()\r\n        }\r\n        reader.onload = e => {\r\n            this.ui.waitRendering(() => {\r\n                file.preview = e.target.result\r\n\r\n                doneCallback && doneCallback()\r\n            })\r\n        }\r\n        this.ui.waitRendering(() => reader.readAsDataURL(file.original))\r\n\r\n        return this\r\n    }\r\n\r\n    processChunks(chunkSize, everyChunkCallback, everyDoneCallback = null, everyErrorCallback = null, everyPromisedBeforeCallback = null) {\r\n        return new Promise(resolve => {\r\n            let remaining = this.files.length\r\n            const left = () => {\r\n                --remaining\r\n                if (remaining === 0) {\r\n                    resolve()\r\n                }\r\n            }\r\n\r\n            this.progress.increaseLimit(remaining)\r\n            this.files.forEach(file => {\r\n                const run = (data = null) => {\r\n                    this.progress.run((progressResolve, progressReject) => {\r\n                        this.processFileChunks(file, chunkSize, everyChunkCallback, data).then(() => {\r\n                            progressResolve()\r\n                            everyDoneCallback && everyDoneCallback(file)\r\n                            left()\r\n                        }).catch(() => {\r\n                            progressReject()\r\n                            everyErrorCallback && everyErrorCallback(file)\r\n                            left()\r\n                        })\r\n                    })\r\n                }\r\n\r\n                (everyPromisedBeforeCallback && everyPromisedBeforeCallback(file).then(run).catch(left)) || run()\r\n            })\r\n        })\r\n    }\r\n\r\n    processFileChunks(file, chunkSize, chunkCallback, data = null) {\r\n        const fileSplitter = new FileSplitter(file.original, chunkSize)\r\n\r\n        return new Promise((resolve, reject) => {\r\n            let remaining = fileSplitter.length()\r\n            const left = () => {\r\n                --remaining\r\n                if (remaining === 0) {\r\n                    resolve()\r\n                }\r\n            }\r\n\r\n            file.progress.increaseLimit(remaining)\r\n            fileSplitter.every((chunkData, chunkIndex, chunksTotal) => {\r\n                file.progress.run((progressResolve, progressReject) => {\r\n                    this.ui.waitRendering(() => {\r\n                        chunkCallback(chunkData, chunkIndex, chunksTotal, () => {\r\n                            progressResolve()\r\n                            left()\r\n                        }, () => {\r\n                            progressReject()\r\n                            reject()\r\n                        }, file, data)\r\n                    })\r\n                })\r\n            })\r\n        })\r\n    }\r\n}"],"file":"files-uploader.js"}