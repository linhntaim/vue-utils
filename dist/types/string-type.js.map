{"version":3,"sources":["../../src/types/string-type.js"],"names":["StringType","value","trim","haystack","needles","is","some","needle","indexOf","string","times","repeat","length","char","left","repeated","chars","replace","RegExp","charAt","toUpperCase","substr","text","split","map","line","filter","i","PrimitiveType"],"mappings":"waAAA,+C,2wEAEaA,CAAAA,U,oPACT,YAAGC,KAAH,CAAU,CACN,MAAO,OAAOA,CAAAA,KAAP,GAAiB,QAC3B,C,qBAED,eAAMA,KAAN,CAAa,CACT,MAAOA,CAAAA,KAAK,GAAK,EAAV,EAAgBA,KAAK,CAACC,IAAN,KAAiB,EAC3C,CAED;AACJ;AACA;AACA;AACA;AACA,O,0BACI,oBAAWC,QAAX,CAAqBC,OAArB,CAA8B,CAC1B,GAAI,KAAKC,EAAL,CAAQD,OAAR,CAAJ,CAAsB,CAClBA,OAAO,CAAG,CAACA,OAAD,CACb,CACD,MAAOA,CAAAA,OAAO,CAACE,IAAR,CAAa,SAAAC,MAAM,CAAI,CAC1B,MAAOJ,CAAAA,QAAQ,CAACK,OAAT,CAAiBD,MAAjB,IAA6B,CACvC,CAFM,CAGV,CAED;AACJ;AACA;AACA;AACA;AACA,O,sBACI,gBAAOE,MAAP,CAAeC,KAAf,CAAsB,CAClB,MAAOD,CAAAA,MAAM,CAACE,MAAP,CAAcD,KAAd,CACV,CAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,O,oBACI,cAAKD,MAAL,CAAaG,MAAb,CAAqBC,KAArB,CAAwC,IAAbC,CAAAA,IAAa,2DAAN,IAAM,CACpC,GAAMC,CAAAA,QAAQ,CAAG,CAAC,KAAKV,EAAL,CAAQO,MAAR,EAAkBA,MAAM,CAACA,MAAzB,CAAkCA,MAAnC,EAA6CH,MAAM,CAACG,MAArE,CACA,MAAOG,CAAAA,QAAQ,EAAI,CAAZ,CACHN,MADG,CACOK,IAAI,CAAG,KAAKH,MAAL,CAAYE,KAAZ,CAAkBE,QAAlB,EAA8BN,MAAjC,CAA0CA,MAAM,CAAG,KAAKE,MAAL,CAAYE,KAAZ,CAAkBE,QAAlB,CACxE,CAED;AACJ;AACA;AACA;AACA;AACA,O,oBACI,cAAKN,MAAL,CAAsC,IAAzBO,CAAAA,KAAyB,2DAAjB,eAAiB,CAClCA,KAAK,CAAGA,KAAK,CAACC,OAAN,CAAc,GAAd,CAAmB,KAAnB,CAAR,CACA,MAAOR,CAAAA,MAAM,CAACQ,OAAP,CAAe,GAAIC,CAAAA,MAAJ,CAAW,KAAOF,KAAP,CAAe,KAAf,CAAuBA,KAAvB,CAA+B,IAA1C,CAAgD,GAAhD,CAAf,CAAqE,EAArE,CACV,CAED;AACJ;AACA;AACA;AACA,O,uBACI,iBAAQP,MAAR,CAAgB,CACZ,MAAOA,CAAAA,MAAM,CAACU,MAAP,CAAc,CAAd,EAAiBC,WAAjB,GAAiCX,MAAM,CAACY,MAAP,CAAc,CAAd,CAC3C,CAED;AACJ;AACA;AACA;AACA,O,qBACI,eAAMC,IAAN,CAAY,gBACR,MAAOA,CAAAA,IAAI,CAACC,KAAL,CAAW,OAAX,EACFC,GADE,CACE,SAAAC,IAAI,CAAI,CACTA,IAAI,CAAG,KAAI,CAACvB,IAAL,CAAUuB,IAAV,CAAP,CACA,GAAIA,IAAJ,CAAU,MAAOA,CAAAA,IACpB,CAJE,EAKFC,MALE,CAKK,SAAAC,CAAC,CAAI,CACT,MAAOA,CAAAA,CACV,CAPE,CAQV,C,uBAlF2BC,4B","sourcesContent":["import {PrimitiveType} from './primitive-type'\r\n\r\nexport class StringType extends PrimitiveType {\r\n    is(value) {\r\n        return typeof value === 'string'\r\n    }\r\n\r\n    empty(value) {\r\n        return value === '' || value.trim() === ''\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {String} haystack\r\n     * @param {String|String[]} needles\r\n     * @returns {boolean}\r\n     */\r\n    startsWith(haystack, needles) {\r\n        if (this.is(needles)) {\r\n            needles = [needles]\r\n        }\r\n        return needles.some(needle => {\r\n            return haystack.indexOf(needle) === 0\r\n        })\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {String} string\r\n     * @param {Number} times\r\n     * @returns {String}\r\n     */\r\n    repeat(string, times) {\r\n        return string.repeat(times)\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {String} string\r\n     * @param {Number|String} length\r\n     * @param {String} char\r\n     * @param {Boolean} left\r\n     * @returns {String}\r\n     */\r\n    fill(string, length, char, left = true) {\r\n        const repeated = (this.is(length) ? length.length : length) - string.length\r\n        return repeated <= 0 ?\r\n            string : (left ? this.repeat(char, repeated) + string : string + this.repeat(char, repeated))\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {String} string\r\n     * @param {String} chars\r\n     * @returns {String}\r\n     */\r\n    trim(string, chars = ' \\t\\n\\r\\0\\x0B') {\r\n        chars = chars.replace(' ', '\\\\s')\r\n        return string.replace(new RegExp('^[' + chars + ']|[' + chars + ']$', 'g'), '')\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {String} string\r\n     * @returns {String}\r\n     */\r\n    ucfirst(string) {\r\n        return string.charAt(0).toUpperCase() + string.substr(1)\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {String} text\r\n     * @returns {String[]}\r\n     */\r\n    lines(text) {\r\n        return text.split(/\\r*\\n/)\r\n            .map(line => {\r\n                line = this.trim(line)\r\n                if (line) return line\r\n            })\r\n            .filter(i => {\r\n                return i\r\n            })\r\n    }\r\n}\r\n"],"file":"string-type.js"}