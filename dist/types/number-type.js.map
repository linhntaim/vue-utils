{"version":3,"sources":["../../src/types/number-type.js"],"names":["NumberType","value","isNaN","is","parseInt","toString","parseFloat","float","min","max","Math","floor","random","PrimitiveType"],"mappings":"waAAA,+C,2wEAEaA,CAAAA,U,oPACT,YAAGC,KAAH,CAAU,CACN,MAAO,OAAOA,CAAAA,KAAP,GAAiB,QAAjB,EACA,CAACC,KAAK,CAAC,CAACD,KAAF,CAChB,C,qBAED,eAAMA,KAAN,CAAa,CACT,MAAOA,CAAAA,KAAK,GAAK,CAAV,EAAeC,KAAK,CAACD,KAAD,CAC9B,C,mBAED,aAAIA,KAAJ,CAAW,CACP,GAAI,KAAKE,EAAL,CAAQF,KAAR,CAAJ,CAAoB,CAChB,MAAOG,CAAAA,QAAQ,CAAC,CAAC,CAACH,KAAF,EAASI,QAAT,EAAD,CAClB,CACD,MAAOD,CAAAA,QAAQ,CAACH,KAAD,CAAR,CAAkB,CAC5B,C,qBAED,eAAMA,KAAN,CAAa,CACT,GAAI,KAAKE,EAAL,CAAQF,KAAR,CAAJ,CAAoB,CAChB,MAAOK,CAAAA,UAAU,CAAC,CAAC,CAACL,KAAF,EAASI,QAAT,EAAD,CACpB,CACD,GAAME,CAAAA,MAAK,CAAGD,UAAU,CAACL,KAAD,CAAxB,CACA,MAAOC,CAAAA,KAAK,CAACK,MAAD,CAAL,CAAe,CAAf,CAAmBA,MAC7B,CAED;AACJ;AACA;AACA;AACA;AACA,O,yBACI,mBAAUC,GAAV,CAAeC,GAAf,CAAoB,CAChB,MAAOC,CAAAA,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,IAAiBH,GAAG,CAAGD,GAAN,CAAY,CAA7B,EAAkCA,GAA7C,CACV,CAED;AACJ;AACA;AACA;AACA;AACA,O,sBACI,gBAAOA,GAAP,CAAYC,GAAZ,CAAiB,CACb,MAAOC,CAAAA,IAAI,CAACE,MAAL,IAAiBH,GAAG,CAAGD,GAAvB,EAA8BA,GACxC,C,uBA3C2BK,4B","sourcesContent":["import {PrimitiveType} from './primitive-type'\r\n\r\nexport class NumberType extends PrimitiveType {\r\n    is(value) {\r\n        return typeof value === 'number'\r\n            || !isNaN(+value)\r\n    }\r\n\r\n    empty(value) {\r\n        return value === 0 || isNaN(value)\r\n    }\r\n\r\n    int(value) {\r\n        if (this.is(value)) {\r\n            return parseInt((+value).toString())\r\n        }\r\n        return parseInt(value) | 0\r\n    }\r\n\r\n    float(value) {\r\n        if (this.is(value)) {\r\n            return parseFloat((+value).toString())\r\n        }\r\n        const float = parseFloat(value)\r\n        return isNaN(float) ? 0 : float\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {Number} min\r\n     * @param {Number} max\r\n     * @returns {Number}\r\n     */\r\n    randomInt(min, max) {\r\n        return Math.floor(Math.random() * (max - min + 1) + min)\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {Number} min\r\n     * @param {Number} max\r\n     * @returns {Number}\r\n     */\r\n    random(min, max) {\r\n        return Math.random() * (max - min) + min\r\n    }\r\n}\r\n"],"file":"number-type.js"}