{"version":3,"sources":["../../src/types/array-type.js"],"names":["ArrayType","value","Array","isArray","from","length","array","keys","only","forEach","key","push","array1","array2","includes","start","end","step","range","i","ObjectType"],"mappings":"uaAAA,yC,swEAEaA,CAAAA,S,wGACT,oBAAc,yDAEb,C,yDAESC,K,CAAO,CACb,MAAOC,CAAAA,KAAK,CAACC,OAAN,CAAcF,KAAd,CACV,C,oCAEYA,K,CAAO,CAChB,MAAOC,CAAAA,KAAK,CAACE,IAAN,CAAWH,KAAX,CACV,C,oCAEYA,K,CAAO,CAChB,MAAOA,CAAAA,KAAK,CAACI,MAAN,GAAiB,CAC3B,C,kCAEWC,K,CAAOC,I,CAAM,CACrB,GAAMC,CAAAA,IAAI,CAAG,EAAb,CACAD,IAAI,CAACE,OAAL,CAAa,SAAAC,GAAG,CAAI,CAChBF,IAAI,CAACG,IAAL,CAAUD,GAAG,EAAI,CAAP,EAAYA,GAAG,CAAGJ,KAAK,CAACD,MAAxB,CAAiCC,KAAK,CAACI,GAAD,CAAtC,CAA8C,IAAxD,CACH,CAFD,EAGA,MAAOF,CAAAA,IACV,C,oCAEYI,M,CAAQC,M,CAAQ,CACzBA,MAAM,CAACJ,OAAP,CAAe,SAAAR,KAAK,CAAI,CACpBW,MAAM,CAACD,IAAP,CAAYV,KAAZ,CACH,CAFD,EAGA,MAAOW,CAAAA,MACV,C,sCAEaN,K,CAAOI,G,CAAK,CACtB,MAAOA,CAAAA,GAAG,EAAI,CAAP,EAAYA,GAAG,EAAIJ,KAAK,CAACD,MACnC,C,0CAEeC,K,CAAOL,K,CAAO,CAC1B,MAAOK,CAAAA,KAAK,CAACQ,QAAN,CAAeb,KAAf,CACV,CAED;AACJ;AACA;AACA;AACA;AACA;AACA,O,oCACiBc,K,CAAOC,G,CAAe,IAAVC,CAAAA,IAAU,2DAAH,CAAG,CAC/B,GAAMC,CAAAA,KAAK,CAAG,EAAd,CACA,GAAID,IAAI,CAAG,CAAX,CAAcA,IAAI,CAAG,CAACA,IAAR,CACd,GAAIF,KAAK,EAAIC,GAAb,CAAkB,CACd,IAAK,GAAIG,CAAAA,CAAC,CAAGJ,KAAb,CAAoBI,CAAC,EAAIH,GAAzB,CAA8BG,CAAC,EAAIF,IAAnC,CAAyC,CACrCC,KAAK,CAACP,IAAN,CAAWQ,CAAX,CACH,CACJ,CAJD,IAIO,CACH,IAAK,GAAIA,CAAAA,EAAC,CAAGJ,KAAb,CAAoBI,EAAC,EAAIH,GAAzB,CAA8BG,EAAC,EAAIF,IAAnC,CAAyC,CACrCC,KAAK,CAACP,IAAN,CAAWQ,EAAX,CACH,CACJ,CACD,MAAOD,CAAAA,KACV,C,sBA5D0BE,sB","sourcesContent":["import {ObjectType} from './object-type'\r\n\r\nexport class ArrayType extends ObjectType {\r\n    constructor() {\r\n        super()\r\n    }\r\n\r\n    static is(value) {\r\n        return Array.isArray(value)\r\n    }\r\n\r\n    static clone(value) {\r\n        return Array.from(value)\r\n    }\r\n\r\n    static empty(value) {\r\n        return value.length === 0\r\n    }\r\n\r\n    static only(array, keys) {\r\n        const only = []\r\n        keys.forEach(key => {\r\n            only.push(key >= 0 && key < array.length ? array[key] : null)\r\n        })\r\n        return only\r\n    }\r\n\r\n    static merge(array1, array2) {\r\n        array2.forEach(value => {\r\n            array1.push(value)\r\n        })\r\n        return array1\r\n    }\r\n\r\n    static hasKey(array, key) {\r\n        return key >= 0 && key <= array.length\r\n    }\r\n\r\n    static hasValue(array, value) {\r\n        return array.includes(value)\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {Number} start\r\n     * @param {Number} end\r\n     * @param {Number} step\r\n     * @returns {Number[]}\r\n     */\r\n    static range(start, end, step = 1) {\r\n        const range = []\r\n        if (step < 0) step = -step\r\n        if (start <= end) {\r\n            for (let i = start; i <= end; i += step) {\r\n                range.push(i)\r\n            }\r\n        } else {\r\n            for (let i = start; i >= end; i -= step) {\r\n                range.push(i)\r\n            }\r\n        }\r\n        return range\r\n    }\r\n}"],"file":"array-type.js"}