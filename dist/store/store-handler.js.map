{"version":3,"sources":["../../src/store/store-handler.js"],"names":["StoreHandler","crypto","encryptExceptNames","namePrefix","store","split","name","includes","rawName","substr","length","callback","Object","keys","forEach","beforeNaming","value","encrypted","setRaw","naming","shouldEncrypt","encrypt","def","getRaw","decrypt","set","JSON","stringify","get","parse","e","removeRaw","names","clearRaw"],"mappings":"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","sourcesContent":["export class StoreHandler {\r\n    /**\r\n     *\r\n     * @param {Crypto|null} crypto\r\n     * @param {String[]|String|null} encryptExceptNames\r\n     * @param {String} namePrefix\r\n     * @param {Object|null} store\r\n     */\r\n    constructor(crypto = null, encryptExceptNames = null, namePrefix = '', store = null) {\r\n        this.crypto = crypto\r\n        this.encryptExceptNames = encryptExceptNames ?\r\n            (typeof encryptExceptNames === 'string' ? encryptExceptNames.split(',') : encryptExceptNames) : null\r\n        this.store = store ? store : {}\r\n        this.namePrefix = namePrefix\r\n    }\r\n\r\n    shouldEncrypt(name) {\r\n        return !this.encryptExceptNames\r\n            || (!this.encryptExceptNames.includes('*') && !this.encryptExceptNames.includes(name))\r\n    }\r\n\r\n    naming(name) {\r\n        return this.namePrefix + name\r\n    }\r\n\r\n    beforeNaming(rawName) {\r\n        return rawName.substr(this.namePrefix.length)\r\n    }\r\n\r\n    isNamed(rawName) {\r\n        return rawName.substr(0, this.namePrefix.length) === this.namePrefix\r\n    }\r\n\r\n    forEach(callback) {\r\n        Object.keys(this.store).forEach(rawName => {\r\n            callback(rawName, this.beforeNaming(), this)\r\n        })\r\n        return this\r\n    }\r\n\r\n    setRaw(name, value) {\r\n        this.store[name] = value\r\n        return this\r\n    }\r\n\r\n    getRaw(name) {\r\n        return name in this.store ? this.store[name] : null\r\n    }\r\n\r\n    removeRaw(name) {\r\n        if (name in this.store) {\r\n            delete this.store[name]\r\n        }\r\n        return this\r\n    }\r\n\r\n    clearRaw() {\r\n        this.store = {}\r\n        return this\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {String} name\r\n     * @param {String} value\r\n     * @param {boolean|null} encrypted\r\n     * @returns {StoreHandler}\r\n     */\r\n    set(name, value, encrypted = null) {\r\n        return this.setRaw(\r\n            this.naming(name),\r\n            this.crypto && ((encrypted === null && this.shouldEncrypt(name)) || encrypted === true) ?\r\n                this.crypto.encrypt(value) : value,\r\n        )\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {String} name\r\n     * @param {String|null} def\r\n     * @param {boolean|null} encrypted\r\n     * @returns {String|null}\r\n     */\r\n    get(name, def = null, encrypted = null) {\r\n        const value = this.getRaw(this.naming(name))\r\n        return value ?\r\n            (\r\n                this.crypto && ((encrypted === null && this.shouldEncrypt(name)) || encrypted === true) ?\r\n                    this.crypto.decrypt(value) : value\r\n            )\r\n            : def\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {String} name\r\n     * @param {Object} value\r\n     * @param {boolean|null} encrypted\r\n     * @returns {StoreHandler}\r\n     */\r\n    setJson(name, value, encrypted = null) {\r\n        return this.set(name, JSON.stringify(value), encrypted)\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {String} name\r\n     * @param {String|null} def\r\n     * @param {boolean|null} encrypted\r\n     * @returns {Object|null}\r\n     */\r\n    getJson(name, def = null, encrypted = null) {\r\n        const value = this.get(name, null, encrypted)\r\n        try {\r\n            return value ? JSON.parse(value) : def\r\n        } catch (e) {\r\n            return def\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {String} name\r\n     * @returns {StoreHandler}\r\n     */\r\n    remove(name) {\r\n        return this.removeRaw(this.naming(name))\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {String[]} names\r\n     * @returns {StoreHandler}\r\n     */\r\n    removeMany(names) {\r\n        names.forEach(name => this.removeRaw(this.naming(name)))\r\n        return this\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @returns {StoreHandler}\r\n     */\r\n    clear() {\r\n        return this.clearRaw()\r\n    }\r\n}\r\n"],"file":"store-handler.js"}